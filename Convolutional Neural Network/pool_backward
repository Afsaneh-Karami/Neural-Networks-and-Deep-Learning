def pool_backward(dA, cache, mode = "max"):
    """
    Implements the backward pass of the pooling layer
    
    Arguments:
    dA -- gradient of cost with respect to the output of the pooling layer, same shape as A
    cache -- cache output from the forward pass of the pooling layer, contains the layer's input and hparameters 
    mode -- the pooling mode you would like to use, defined as a string ("max" or "average")
    
    Returns:
    dA_prev -- gradient of cost with respect to the input of the pooling layer, same shape as A_prev
    """
    
    (A_prev, hparameters) =cache
    stride =hparameters["stride"]
    f =hparameters["f"]
    m, n_H_prev, n_W_prev, n_C_prev =A_prev.shape
    m, n_H, n_W, n_C =dA.shape
    dA_prev =np.zeros((A_prev.shape))
    
    for i in range(m):
        a_prev =A_prev[i]
        for h in range(n_H):
            for w in range(n_W): 
                for c in range(n_C):
                    vert_start =h * stride
                    vert_end =vert_start+f
                    horiz_start =w * stride
                    horiz_end =horiz_start+f
                    if mode == "max":
                        a_prev_slice = a_prev[ vert_start:vert_end, horiz_start:horiz_end, c ]
                        mask =create_mask_from_window(a_prev_slice)
                        dA_prev[i, vert_start:vert_end, horiz_start:horiz_end, c] += mask * dA[i, h, w, c]
                    elif mode == "average":
                        da =dA[i, h, w, c]
                        shape =(f,f)
                        dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] +=distribute_value(da, shape)
    
    return dA_prev
