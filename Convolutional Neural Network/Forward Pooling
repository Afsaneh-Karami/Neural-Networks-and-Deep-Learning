def pool_forward(A_prev, hparameters, mode = "max"):
    """
    Implements the forward pass of the pooling layer
    
    Arguments:
    A_prev -- Input data, numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)
    hparameters -- python dictionary containing "f" and "stride"
    mode -- the pooling mode you would like to use, defined as a string ("max" or "average")
    
    Returns:
    A -- output of the pool layer, a numpy array of shape (m, n_H, n_W, n_C)
    cache -- cache used in the backward pass of the pooling layer, contains the input and hparameters 
    """
    f = hparameters["f"]
    stride = hparameters["stride"]
    n_H = int(1 + (n_H_prev - f) / stride)
    n_W = int(1 + (n_W_prev - f) / stride)
    n_C = n_C_prev
    A = np.zeros((m, n_H, n_W, n_C)) 
    for i in range(m):
        for h in range(n_H): 
            vert_start =h*stride
            vert_end =vert_start+f
            for w in range(n_W):
                horiz_start = w*stride
                horiz_end =horiz_start+f
                for c in range (n_C):
                    a_prev_slice =A_prev[i,vert_start:vert_end,horiz_start:horiz_end,c]
                    if mode == "max":
                        A[i, h, w, c] =np.max(a_prev_slice)
                    elif mode == "average":
                        A[i, h, w, c] =np.mean(a_prev_slice)
    cache = (A_prev, hparameters)
    return A , cache
