def conv_forward(A_prev, W, b, hparameters):

"""
Arguments:
    A_prev -- output activations of the previous layer, 
        numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev)
    W -- Weights, numpy array of shape (f, f, n_C_prev, n_C)
    b -- Biases, numpy array of shape (1, 1, 1, n_C)
    hparameters -- python dictionary containing "stride" and "pad"
        
    Returns:
    Z -- conv output, numpy array of shape (m, n_H, n_W, n_C)
    cache -- cache of values needed for the conv_backward() function
    """
    (m, n_H_prev, n_W_prev, n_C_prev) =np.shape(A_prev)
    (f, f, n_C_prev, n_C) =np.shape(W)
    stride =hparameters["stride"]
    pad =hparameters["pad"]
    n_H =int(int((n_H_prev-f+2*pad)/stride) +1)
    n_W =int(int((n_W_prev-f+2*pad)/stride) +1)
    Z =np.zeros((m, n_H, n_W, n_C))
    for i in range(m):
        a_prev_pad =A_prev_pad[i]
        for h in range(n_H):
            vert_start = h*stride
            vert_end =vert_start+f
            for w in range(n_W):
                horiz_start =w*stride
                horiz_end =horiz_start+f
                for c in range(n_C):
                    a_slice_prev =a_prev_pad[vert_start:vert_end,horiz_start:horiz_end,0:n_C_prev]
                    weights = W[:,:,:,c]
                    biases =b[:,:,:,c]
                    Z[i, h, w, c] =conv_single_step(a_slice_prev, weights, biases)
    cache = (A_prev, W, b, hparameters)
    
    return Z, cache
