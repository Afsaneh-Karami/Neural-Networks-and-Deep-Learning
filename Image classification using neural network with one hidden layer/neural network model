def nn_model(X, Y, n_h, num_iterations = 10000, print_cost=False):

# Loading the data
train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig= load_dataset()

# calculation of units of input and output layer
n_x, n_y=layer_sizes(train_set_x_orig, train_set_y_orig)

# Initialize parameters W1.b1,W2,b2
parameters =initialize_parameters(n_x, n_h, n_y)

# Loop (gradient descent)
for i in range(0, num_iterations):

# Forward propagation. Inputs: "X, parameters". Outputs: "A2, cache".
A2, cache =forward_propagation(X, parameters) 
cost =compute_cost(A2, Y)

# Backward propagation. Inputs: "parameters, cache, X, Y". Outputs: "grads".
grads =backward_propagation(parameters, cache, X, Y)

# Gradient descent parameter update. Inputs: "parameters, grads". Outputs: "parameters".
parameters =update_parameters(parameters, grads, learning_rate = 1.2)

if print_cost and i % 1000 == 0:
            print ("Cost after iteration %i: %f" %(i, cost))

return parameters
